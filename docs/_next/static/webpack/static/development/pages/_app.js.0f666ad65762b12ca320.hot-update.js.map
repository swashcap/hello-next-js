{"version":3,"file":"static/webpack/static/development/pages/_app.js.0f666ad65762b12ca320.hot-update.js","sources":["webpack:///./components/styleguide/CodeBlock.tsx"],"sourcesContent":["import React from 'react'\nimport clsx from 'clsx'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live'\nimport { mdx } from '@mdx-js/react'\n\nimport { prismTheme } from './prismTheme'\n\ntype ComponentProps<T> = T extends React.Component<infer U> ? U : never\n\nexport interface CodeBlockProps\n  extends Omit<ComponentProps<Highlight>, 'children'> {\n  children?: string\n  className?: string\n  live?: boolean\n  preview?: boolean\n}\n\nexport const CodeBlock: React.FC<any> = ({\n  children,\n  className: cls,\n  live,\n  preview,\n  ...rest\n}) => {\n  const language = cls.replace(/language-/, '')\n  const code = children?.trim() || ''\n\n  if (live) {\n    return (\n      <div className={clsx('ba b--silver', cls)} {...rest}>\n        <LiveProvider\n          code={code}\n          language={children}\n          scope={{\n            mdx\n          }}\n          theme={prismTheme}\n        >\n          <LivePreview className=\"pa3\" />\n          <LiveError className=\"dark-red mv0 pa3\" />\n          {/* https://github.com/satya164/react-simple-code-editor#props */}\n          <LiveEditor\n            style={\n              {\n                // fontFamily: 'Consolas, monaco, monospace',\n                // fontSize: '1em',\n                // lineHeight: 1.25,\n                // padding: 16\n              }\n            }\n          />\n        </LiveProvider>\n      </div>\n    )\n  } else if (preview) {\n    return (\n      <div className={clsx('ba b--silver', cls)} {...rest}>\n        <LiveProvider\n          code={code}\n          language={children}\n          noInline\n          scope={{\n            mdx\n          }}\n          theme={prismTheme}\n        >\n          <LivePreview />\n        </LiveProvider>\n      </div>\n    )\n  }\n\n  return (\n    <Highlight\n      {...defaultProps}\n      code={code}\n      language={language}\n      theme={prismTheme}\n      {...rest}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre\n          className={clsx('code lh-title pa3', className, cls)}\n          style={style}\n        >\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AALA;AAgBA;;;;A","sourceRoot":""}