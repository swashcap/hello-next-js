{"version":3,"file":"static/webpack/static/development/pages/components/Button.js.378a0a696256b7e38747.hot-update.js","sources":["webpack:///./pages/components/Button.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {Button} from '../../components/library/Button'\nimport {CodeBlock} from '../../components/styleguide/CodeBlock'\nimport {Grid} from '../../components/styleguide/Grid'\nimport {MethodsTable} from '../../components/styleguide/component/MethodsTable'\nimport {PropsTable} from '../../components/styleguide/component/PropsTable'\nimport {TableOfContents} from '../../components/styleguide/component/TableOfContents'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Button`}</h1>\n    <Grid mdxType=\"Grid\">\n  <Grid.Column className=\"w-100 w-75-l\">\n    <p className=\"f4\">The Button is the base interactive component for hello-next-js: it affords navigation, form submission, and application state changes.</p>\n    <p>Three variations of Button exist to demonstrate the level of interaction: primary, secondary, and tertiary.</p>\n    <CodeBlock language=\"tsx\" preview scope={{\n          Button\n        }} mdxType=\"CodeBlock\">\n      {`\n<div className=\"flex flex-wrap content-center\">\n  <Button className=\"mr3\">Primary</Button>\n  <Button className=\"mr3\" variant=\"secondary\">Secondary</Button>\n  <Button variant=\"tertiary\">Tertiary</Button>\n</div>`}\n    </CodeBlock>\n  </Grid.Column>\n  <Grid.Column className=\"w-100 w-25-l\">\n    <TableOfContents items={[['Usage', ['Variants']], ['Accessibility'], ['Component API', ['Props', 'Methods']]]} mdxType=\"TableOfContents\" />\n  </Grid.Column>\n    </Grid>\n    <h4>{`Related`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#\"\n        }}>{`Interaction design guidelines ↗`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#\"\n        }}>{`Button design specifications ↗`}</a></li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <p>{`Import the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component into a React component in your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import {Button} from 'hello-next-js'\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` by passing it children and an `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` handler in your React component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react'\nimport {Button} from 'hello-next-js'\n\nexport const MyComponent: React.FC<any> = () => {\n  return (\n    <Button\n      onClick={(event) => {\n        console.log('Clicked!', event)\n      }}\n    >\n      My Button\n    </Button>\n  )\n}\n`}</code></pre>\n    <h3>{`Variants`}</h3>\n    <p><inlineCode parentName=\"p\">{`Button`}</inlineCode>{` comes with three variations, set through the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` property:`}</p>\n    <h4>{`Primary`}</h4>\n    <p>{`Use the primary variant for call to action, form submission, dialog or modal trigger.`}</p>\n    <CodeBlock language=\"tsx\" live scope={{\n      Button\n    }} mdxType=\"CodeBlock\">\n  {`<Button>Primary button</Button>`}\n    </CodeBlock>\n    <h4>{`Secondary`}</h4>\n    <CodeBlock language=\"tsx\" live scope={{\n      Button\n    }} mdxType=\"CodeBlock\">\n  {`<Button variant=\"secondary\">Secondary button</Button>`}\n    </CodeBlock>\n    <h4>{`Tertiary`}</h4>\n    <CodeBlock language=\"tsx\" live scope={{\n      Button\n    }} mdxType=\"CodeBlock\">\n  {`<Button variant=\"tertiary\">Tertiary button</Button>`}\n    </CodeBlock>\n    <h2>{`Accessibility`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component has a `}<inlineCode parentName=\"p\">{`role=\"button\"`}</inlineCode>{` property provided. Ensure that the element has the appropriate role for its use:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`role=\"submit\"`}</inlineCode>{` for a form submission button`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`role=\"reset\"`}</inlineCode>{` for a form reset button`}</li>\n    </ul>\n    <h4>{`Related`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.deque.com/blog/accessible-aria-buttons/\"\n        }}>{`\"Building Accessible Buttons with ARIA\" on Deque ↗`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role\"\n        }}>{`\"ARIA: button role\" on MDN ↗`}</a></li>\n    </ul>\n    <h2>{`Component API`}</h2>\n    <h3>{`Props`}</h3>\n    <PropsTable component={Button} mdxType=\"PropsTable\" />\n    <h3>{`Methods`}</h3>\n    <MethodsTable component={Button} mdxType=\"MethodsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;;A","sourceRoot":""}