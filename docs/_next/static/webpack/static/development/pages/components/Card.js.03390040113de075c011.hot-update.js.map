{"version":3,"file":"static/webpack/static/development/pages/components/Card.js.03390040113de075c011.hot-update.js","sources":["webpack:///./pages/components/Card.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {Card} from '../../components/library/Card'\nimport {CodeBlock} from '../../components/styleguide/CodeBlock'\nimport {Grid} from '../../components/styleguide/Grid'\nimport {MethodsTable} from '../../components/styleguide/component/MethodsTable'\nimport {PropsTable} from '../../components/styleguide/component/PropsTable'\nimport {TableOfContents} from '../../components/styleguide/component/TableOfContents'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Card`}</h1>\n    <Grid mdxType=\"Grid\">\n  <Grid.Column className=\"w-100 w-75-l\">\n    <p className=\"f4\">Isolate or draw focus to content with the Card.</p>\n    <p>Card is a generic container for text and image content with elevation to separate and draw attention to itself. Group related elements within the Card.</p>\n    <CodeBlock language=\"tsx\" preview scope={{\n          Card\n        }} mdxType=\"CodeBlock\">\n  {`<Card>\n  <h1 className=\"f3 lh-title mb1 mt0\">Sample card</h1>\n  <p className=\"mv0\">This is a sample card.</p>\n</Card>`}\n    </CodeBlock>\n  </Grid.Column>\n  <Grid.Column className=\"w-100 w-25-l\">\n    <TableOfContents items={[['Usage', ['Elevation']], ['Accessibility'], ['Component API', ['Props', 'Methods']]]} mdxType=\"TableOfContents\" />\n  </Grid.Column>\n    </Grid>\n    <h4>{`Related`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#\"\n        }}>{`Content and layout design guidelines â†—`}</a></li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <p>{`Import the `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` component into a React component in your project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import {Card} from 'hello-next-js'\n`}</code></pre>\n    <CodeBlock language=\"tsx\" live scope={{\n      Card\n    }} mdxType=\"CodeBlock\">\n  {`<Card>\n  <h1 className=\"f3 lh-title mb1 mt0\">Sample card</h1>\n  <p className=\"mv0\">This is a sample card.</p>\n</Card>`}\n    </CodeBlock>\n    <h3>{`Elevation`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{`'s elevation can be modifed with the `}<inlineCode parentName=\"p\">{`elevation`}</inlineCode>{` property:`}</p>\n    <CodeBlock language=\"tsx\" live scope={{\n      Card\n    }} mdxType=\"CodeBlock\">\n  {`<Card elevation=\"2\">\n  <h1 className=\"f3 lh-title mb1 mt0\">Sample card</h1>\n  <p className=\"mv0\">This is a sample card.</p>\n</Card>`}\n    </CodeBlock>\n    <h2>{`Accessibility`}</h2>\n    <p><inlineCode parentName=\"p\">{`Card`}</inlineCode>{` is a simple container, and has no accessibility concerns.`}</p>\n    <h2>{`Component API`}</h2>\n    <h3>{`Props`}</h3>\n    <PropsTable component={Card} mdxType=\"PropsTable\" />\n    <h3>{`Methods`}</h3>\n    <MethodsTable component={Card} mdxType=\"MethodsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;;A","sourceRoot":""}