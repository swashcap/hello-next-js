{"version":3,"file":"static/webpack/static/development/pages/components/Alert.js.c9164d5628ae056e66b0.hot-update.js","sources":["webpack:///./components/styleguide/CodeBlock.tsx","webpack:///./components/styleguide/component/PropsTable.tsx"],"sourcesContent":["import React from 'react'\nimport clsx from 'clsx'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport {\n  LiveProvider,\n  LiveEditor,\n  LiveError,\n  LivePreview,\n  LiveProviderProps\n} from 'react-live'\nimport { mdx } from '@mdx-js/react'\n\nimport { prismTheme } from './prismTheme'\n\ntype ComponentProps<T> = T extends React.Component<infer U> ? U : never\n\nexport interface CodeBlockProps\n  extends Omit<ComponentProps<Highlight>, 'children'> {\n  children?: string\n  className?: string\n  live?: boolean\n  preview?: boolean\n  scope?: LiveProviderProps['scope']\n}\n\nexport const CodeBlock: React.FC<any> = ({\n  children,\n  className: cls,\n  language: lang,\n  live,\n  preview,\n  scope,\n  ...rest\n}) => {\n  const language = lang || (cls || '').replace(/language-/, '')\n  const code = children?.trim() || ''\n\n  if (live) {\n    return (\n      <div className={clsx('ba b--light-gray', cls)} {...rest}>\n        <LiveProvider\n          code={code}\n          language={language}\n          scope={{\n            ...scope,\n            mdx\n          }}\n          theme={prismTheme}\n        >\n          <LivePreview className=\"pa3 pa4-ns\" />\n          <LiveError className=\"dark-red mv0 nt4 pa3\" />\n          {/* https://github.com/satya164/react-simple-code-editor#props */}\n          <div className=\"bg-near-white pa2\">\n            <LiveEditor\n              style={{\n                fontFamily: 'Consolas, monaco, monospace',\n                fontSize: '14px',\n                lineHeight: 1.25,\n                padding: 0\n              }}\n            />\n          </div>\n        </LiveProvider>\n      </div>\n    )\n  } else if (preview) {\n    return (\n      <div className={clsx('ba b--light-gray', cls)} {...rest}>\n        <LiveProvider\n          code={code}\n          language={language}\n          scope={{\n            ...scope,\n            mdx\n          }}\n          theme={prismTheme}\n        >\n          <LivePreview className=\"pa3 pa4-ns\" />\n          <LiveError className=\"dark-red mv0 nt4 pa3\" />\n        </LiveProvider>\n      </div>\n    )\n  }\n\n  return (\n    <Highlight\n      {...defaultProps}\n      code={code}\n      language={language}\n      theme={prismTheme}\n      {...rest}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre\n          className={clsx(\n            'code f6 lh-title overflow-scroll pa3',\n            className,\n            cls\n          )}\n          style={style}\n        >\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  )\n}\ntry {\n    // @ts-ignore\n    CodeBlock.displayName = \"CodeBlock\";\n    // @ts-ignore\n    CodeBlock.__docgenInfo = { \"description\": \"\", \"displayName\": \"CodeBlock\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"components/styleguide/CodeBlock.tsx#CodeBlock\"] = { docgenInfo: CodeBlock.__docgenInfo, name: \"CodeBlock\", path: \"components/styleguide/CodeBlock.tsx#CodeBlock\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport clsx from 'clsx'\nimport { ComponentDoc } from 'react-docgen-typescript'\n\nimport { Code } from '../Code'\nimport { Empty } from '../Empty'\n\nexport interface PropsTableProps extends React.HTMLAttributes<HTMLDivElement> {\n  component?: React.ComponentType<any> & {\n    __docgenInfo?: ComponentDoc\n  }\n}\n\n/**\n * Props table.\n *\n * Display a React component's properties and related metadata in a table.\n */\nexport const PropsTable: React.FC<PropsTableProps> = ({\n  className,\n  component,\n  ...rest\n}) => {\n  if (\n    !component?.__docgenInfo ||\n    !Object.keys(component.__docgenInfo.props).length\n  ) {\n    return <Empty>No props found</Empty>\n  }\n\n  const {\n    __docgenInfo: { props }\n  } = component\n\n  return (\n    <div className={clsx('overflow-scroll w-100', className)} {...rest}>\n      <table className=\"collapse w-100\">\n        <thead className=\"bg-near-white tl v-top\">\n          <tr>\n            <th className=\"pa2\">Name</th>\n            <th className=\"pa2\">Type</th>\n            <th className=\"pa2\">Default</th>\n            <th className=\"pa2\">Description</th>\n            <th className=\"pa2\">Required</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(props).map(key => {\n            const { defaultValue, description, name, required, type } = props[\n              key\n            ]\n\n            return (\n              <tr className=\"bb b--silver v-top\" key={key}>\n                <td className=\"pa2\">\n                  <Code>{name}</Code>\n                </td>\n                <td className=\"pa2\">\n                  <Code>\n                    {type.name} {type.raw}\n                  </Code>\n                </td>\n                <td className=\"pa2\">\n                  {!!defaultValue?.value && <Code>{defaultValue.value}</Code>}\n                </td>\n                <td className=\"pa2\">{description}</td>\n                <td className=\"pa2\">{required ? 'Required' : ''}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\ntry {\n    // @ts-ignore\n    PropsTable.displayName = \"PropsTable\";\n    // @ts-ignore\n    PropsTable.__docgenInfo = { \"description\": \"Props table.\\n\\nDisplay a React component's properties and related metadata in a table.\", \"displayName\": \"PropsTable\", \"props\": { \"component\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"(ComponentClass<any, any> & { __docgenInfo?: ComponentDoc; }) | (FunctionComponent<any> & { __docgenInfo?: ComponentDoc; })\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"components/styleguide/component/PropsTable.tsx#PropsTable\"] = { docgenInfo: PropsTable.__docgenInfo, name: \"PropsTable\", path: \"components/styleguide/component/PropsTable.tsx#PropsTable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAOA;AAEA;AAaA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAFA;AAIA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAFA;AAIA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AATA;AAoBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AAGA;AACA;AACA;AAOA;;;;;AAKA;AAIA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}